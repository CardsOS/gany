var searchIndex = JSON.parse('{\
"gany":{"doc":"","t":[3,8,8,24,8,16,3,13,4,16,3,3,3,3,8,24,13,8,8,5,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,5,11,11,11,11,12,11,12,12,10,11,11,11,11,10,11,11,5,11,11,11,11,0,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,12,11,11,10,11,11,11,10,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,3,3,3,13,13,3,4,3,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,17,17,17,17,17,17,17,17,12,12,12,12,12,12,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,11,12,5,5,5,5,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11],"n":["BufWriter","Context","Deserialize","Deserialize","Digest","Error","File","None","Option","OutputSize","Package","Path","PathBuf","Repository","Serialize","Serialize","Some","TryInto","Write","add_package","address","ancestors","and","and_then","apply_patch","arch","arch","as_deref","as_deref_mut","as_fd","as_mut","as_os_str","as_path","as_pin_mut","as_pin_ref","as_raw_fd","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","buf","buffer","by_ref","canonicalize","capacity","capacity","chain","clear","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cloned","cmp","cmp","cmp","components","contains","context","context","copied","copied","create","create_delta_towards","create_package","decode","decode","default","default","dependencies","deref","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","digest","display","drop","drop_package","encode","encode","encode","ends_with","env","env","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","exists","expect","extend","extend_one","extension","extract_package","file_name","file_prefix","file_stem","files","filter","finalize","finalize_reset","flatten","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_output","from_raw_bytes","from_raw_fd","from_raw_vec","from_residual","from_str","fs","get_mut","get_or_insert","get_or_insert_default","get_or_insert_with","get_ref","has_root","hash","hash","hash","initializer","inner","inner","inner","inner","insert","into","into","into","into","into","into","into_boxed_path","into_inner","into_iter","into_os_string","into_parts","into_path_buf","into_raw_fd","into_raw_vec","is_absolute","is_dir","is_file","is_none","is_read_vectored","is_relative","is_some","is_symlink","is_write_vectored","is_write_vectored","is_write_vectored","iter","iter","iter_mut","join","keccak","load_repositories","map","map_or","map_or_else","metadata","metadata","name","name","ne","ne","ne","new","new","new","new","ok_or","ok_or_else","open","options","or","or_else","output_size","panicked","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","product","push","rand","read","read_at","read_dir","read_link","read_to_end","read_to_string","read_vectored","refresh_remote_packages","replace","reserve","reserve_exact","reset","seek","seek","serialize","serialize","serialize","serialize","serialize","serialize","set_extension","set_file_name","set_len","set_permissions","shrink_to","shrink_to_fit","starts_with","strip_prefix","sum","symlink_metadata","sync_all","sync_data","take","to_json","to_owned","to_owned","to_owned","to_owned","to_owned","to_path_buf","to_raw_bytes","to_str","to_string_lossy","transpose","try_clone","try_exists","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","unzip","update","upgrade_packages","version","with_capacity","with_capacity","with_context","with_context","with_extension","with_file_name","write","write","write","write_all","write_all","write_all_vectored","write_at","write_file","write_fmt","write_vectored","write_vectored","write_vectored","xor","zip","zip_with","0","Args","ArgsOs","JoinPathsError","NotPresent","NotUnicode","SplitPaths","VarError","Vars","VarsOs","args","args_os","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","consts","current_dir","current_exe","description","description","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","home_dir","inner","inner","inner","inner","inner","inner","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","join_paths","len","len","ne","next","next","next","next","next","next_back","next_back","remove_var","set_current_dir","set_var","size_hint","size_hint","size_hint","size_hint","size_hint","split_paths","temp_dir","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","var","var_os","vars","vars_os","0","ARCH","DLL_EXTENSION","DLL_PREFIX","DLL_SUFFIX","EXE_EXTENSION","EXE_SUFFIX","FAMILY","OS","0","0","0","0","0","0","DirBuilder","DirEntry","File","FileType","Metadata","OpenOptions","Permissions","ReadDir","accessed","append","as_raw_stat","atime","atime_nsec","blksize","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalize","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","copy","create","create","create_dir","create_dir_all","create_new","created","ctime","ctime_nsec","custom_flags","dev","eq","eq","equivalent","equivalent","file_name","file_name_ref","file_type","file_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_mode","gid","hard_link","hash","inner","inner","ino","ino","into","into","into","into","into","into","into","into_iter","is_block_device","is_char_device","is_dir","is_dir","is_fifo","is_file","is_file","is_socket","is_symlink","is_symlink","len","metadata","metadata","mode","mode","mode","mode","modified","mtime","mtime_nsec","ne","ne","new","new","next","nlink","open","path","permissions","rdev","read","read","read_dir","read_link","read_to_string","readonly","recursive","recursive","remove_dir","remove_dir_all","remove_file","rename","set_mode","set_permissions","set_readonly","size","soft_link","st_atime","st_atime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_gid","st_ino","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_rdev","st_size","st_uid","symlink_metadata","to_owned","to_owned","to_owned","to_owned","truncate","try_exists","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","write","write"],"q":["ganygany::Option","gany::env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gany::env::VarError","gany::env::consts","","","","","","","","gany::fsd":["Wraps a writer and buffers its output.","Provides the <code>context</code> method for <code>Result</code>.","A <strong>data structure</strong> that can be deserialized from any data …","","The <code>Digest</code> trait specifies an interface common for digest …","The type returned in the event of a conversion error.","A reference to an open file on the filesystem.","No value","The <code>Option</code> type. See the module level documentation for …","Output size for <code>Digest</code>","The data associated with a package","A slice of a path (akin to <code>str</code>).","An owned, mutable path (akin to <code>String</code>).","The data associated with a repository","A <strong>data structure</strong> that can be serialized into any data …","","Some value <code>T</code>","An attempted conversion that consumes <code>self</code>, which may or …","A trait for objects which are byte-oriented sinks.","Add a package to your software installation","The address (URL or IP) of the repository","Produces an iterator over <code>Path</code> and its ancestors.","Returns <code>None</code> if the option is <code>None</code>, otherwise returns <code>optb</code>.","Returns <code>None</code> if the option is <code>None</code>, otherwise calls <code>f</code> with …","","The CPU architecture intended for use with the packaged …","The CPU architecture the repository supports","Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to …","Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to …","","Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.","Yields the underlying <code>OsStr</code> slice.","Coerces to a <code>Path</code> slice.","Converts from Pin&lt;&amp;mut Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;mut T&gt;&gt;.","Converts from Pin&lt;&amp;Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;T&gt;&gt;.","","","","","","Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.","","","","","","","","","","","","","","","","","","Returns a reference to the internally buffered data.","Creates a “by reference” adapter for this instance of …","Returns the canonical, absolute form of the path with all …","Returns the number of bytes the internal buffer can hold …","Invokes <code>capacity</code> on the underlying instance of <code>OsString</code>.","Digest input data in a chained manner.","Invokes <code>clear</code> on the underlying instance of <code>OsString</code>.","","","","","","","","","","","","Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …","Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the …","","","","Produces an iterator over the <code>Component</code>s of the path.","Returns <code>true</code> if the option is a <code>Some</code> value containing the …","Wrap the error value with additional context.","","Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents …","Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the …","Opens a file in write-only mode.","","Package a piece of software for future distribution","","","","Returns <code>None</code>.","The package names, along with their versions, that a …","","The description of the package","The description of the repository","Deserialize this value from the given Serde deserializer.","","","","","Convenience function to compute hash of the <code>data</code>. It will …","Returns an object that implements <code>Display</code> for safely …","","Drop a package from your software installation","","","","Determines whether <code>child</code> is a suffix of <code>self</code>.","Inspection and manipulation of the process’s environment.","Inspects an environment variable at compile time.","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the path points at an existing entity.","Returns the contained <code>Some</code> value, consuming the <code>self</code> value.","","","Extracts the extension of <code>self.file_name</code>, if possible.","Extract a software package","Returns the final component of the <code>Path</code>, if there is one.","Extracts the prefix of <code>self.file_name</code>.","Extracts the stem (non-extension) portion of <code>self.file_name</code>…","The files that a package owns, including potential ghost …","Returns <code>None</code> if the option is <code>None</code>, otherwise calls …","Retrieve result and consume hasher instance.","Retrieve result and reset hasher instance.","Converts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.","Flush this output stream, ensuring that all intermediately …","","","","","","","","","","","","","","","","Converts a <code>String</code> into a <code>PathBuf</code>","Converts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code>","Converts a clone-on-write pointer to an owned path.","Converts an <code>OsString</code> into a <code>PathBuf</code>","Converts a borrowed <code>OsStr</code> to a <code>PathBuf</code>.","","","Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.","Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>","Moves <code>val</code> into a new <code>Some</code>.","","Takes each element in the <code>Iterator</code>: if it is <code>None</code>, no …","","","","","","","Filesystem manipulation operations.","Gets a mutable reference to the underlying writer.","Inserts <code>value</code> into the option if it is <code>None</code>, then returns …","Inserts the default value into the option if it is <code>None</code>, …","Inserts a value computed from <code>f</code> into the option if it is …","Gets a reference to the underlying writer.","Returns <code>true</code> if the <code>Path</code> has a root.","","","","","","","","","Inserts <code>value</code> into the option, then returns a mutable …","","","","","","","Converts this <code>PathBuf</code> into a boxed <code>Path</code>.","Unwraps this <code>BufWriter&lt;W&gt;</code>, returning the underlying writer.","Returns a consuming iterator over the possibly contained …","Consumes the <code>PathBuf</code>, yielding its internal <code>OsString</code> …","Disassembles this <code>BufWriter&lt;W&gt;</code>, returning the underlying …","Converts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …","","","Returns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …","Returns <code>true</code> if the path exists on disk and is pointing at …","Returns <code>true</code> if the path exists on disk and is pointing at …","Returns <code>true</code> if the option is a <code>None</code> value.","","Returns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.","Returns <code>true</code> if the option is a <code>Some</code> value.","Returns <code>true</code> if the path exists on disk and is pointing at …","","","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Produces an iterator over the path’s components viewed …","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Creates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.","The SHA3-256 hash of the LZ4-compressed archive the …","Load repository data from filesystem into memory","Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a …","Returns the provided default result (if none), or applies …","Computes a default function result (if none), or applies a …","Queries metadata about the underlying file.","Queries the file system to get information about a file, …","The name of the package","The name of the repository","","","","Create new hasher instance","Creates a new <code>BufWriter&lt;W&gt;</code> with a default buffer capacity. …","Allocates an empty <code>PathBuf</code>.","Directly wraps a string slice as a <code>Path</code> slice.","Transforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …","Transforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …","Attempts to open a file in read-only mode.","Returns a new OpenOptions object.","Returns the option if it contains a value, otherwise …","Returns the option if it contains a value, otherwise calls …","Get output size of the hasher","","Returns the <code>Path</code> without its final component, if there is …","","","","","","","","","","","","","","","","","Truncates <code>self</code> to <code>self.parent</code>.","Takes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …","Extends <code>self</code> with <code>path</code>.","","","","Returns an iterator over the entries within a directory.","Reads a symbolic link, returning the file that the link …","","","","Refresh the local package repository with one from a …","Replaces the actual value in the option by the value given …","Invokes <code>reserve</code> on the underlying instance of <code>OsString</code>.","Invokes <code>reserve_exact</code> on the underlying instance of …","Reset hasher instance to its initial state.","","Seek to the offset, in bytes, in the underlying writer.","Serialize this value into the given Serde serializer.","","","","","","Updates <code>self.extension</code> to <code>extension</code>.","Updates <code>self.file_name</code> to <code>file_name</code>.","Truncates or extends the underlying file, updating the …","Changes the permissions on the underlying file.","Invokes <code>shrink_to</code> on the underlying instance of <code>OsString</code>.","Invokes <code>shrink_to_fit</code> on the underlying instance of …","Determines whether <code>base</code> is a prefix of <code>self</code>.","Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.","Takes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …","Queries the metadata about a file without following …","Attempts to sync all OS-internal metadata to disk.","This function is similar to <code>sync_all</code>, except that it might …","Takes the value out of the option, leaving a <code>None</code> in its …","","","","","","","Converts a <code>Path</code> to an owned <code>PathBuf</code>.","","Yields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.","Converts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.","Transposes an <code>Option</code> of a <code>Result</code> into a <code>Result</code> of an <code>Option</code>…","Creates a new <code>File</code> instance that shares the same …","Returns <code>Ok(true)</code> if the path points at an existing entity.","","","","","","","Performs the conversion.","","","","","","","","","","","","","","Returns the contained <code>Some</code> value, consuming the <code>self</code> value.","Returns the contained <code>Some</code> value or a provided default.","Returns the contained <code>Some</code> value or a default.","Returns the contained <code>Some</code> value or computes it from a …","Returns the contained <code>Some</code> value, consuming the <code>self</code> value,","Unzips an option containing a tuple of two options.","Digest data, updating the internal state.","Upgrade your local packages with newer versions held in a …","The version of the packaged software","Creates a new <code>BufWriter&lt;W&gt;</code> with the specified buffer …","Creates a new <code>PathBuf</code> with a given capacity used to create …","Wrap the error value with additional context that is …","","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given …","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given file …","Write a buffer into this writer, returning how many bytes …","","","","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","","Write a file to the filesystem","Writes a formatted string into this writer, returning any …","","","Like <code>write</code>, except that it writes from a slice of buffers.","Returns <code>Some</code> if exactly one of <code>self</code>, <code>optb</code> is <code>Some</code>, …","Zips <code>self</code> with another <code>Option</code>.","Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.","","An iterator over the arguments of a process, yielding a …","An iterator over the arguments of a process, yielding an …","The error type for operations on the <code>PATH</code> variable. …","The specified environment variable was not present in the …","The specified environment variable was found, but it did …","An iterator that splits an environment variable into paths …","The error type for operations interacting with environment …","An iterator over a snapshot of the environment variables …","An iterator over a snapshot of the environment variables …","Returns the arguments that this program was started with …","Returns the arguments that this program was started with …","","","","","","","","","","","","","","","","","Constants associated with the current target","Returns the current working directory as a <code>PathBuf</code>.","Returns the full filesystem path of the current running …","","","","","","","","","","","","","","","","","","","","","Returns the path of the current user’s home directory if …","","","","","","","","","","","","","","","","","","","","","Joins a collection of <code>Path</code>s appropriately for the <code>PATH</code> …","","","","","","","","","","","Removes an environment variable from the environment of …","Changes the current working directory to the specified …","Sets the environment variable <code>key</code> to the value <code>value</code> for …","","","","","","Parses input according to platform conventions for the <code>PATH</code>","Returns the path of a temporary directory.","","","","","","","","","","","","","","","","","","","","","","","","","Fetches the environment variable <code>key</code> from the current …","Fetches the environment variable <code>key</code> from the current …","Returns an iterator of (variable, value) pairs of strings, …","Returns an iterator of (variable, value) pairs of OS …","","A string describing the architecture of the CPU that is …","Specifies the file extension used for shared libraries on …","Specifies the filename prefix used for shared libraries on …","Specifies the filename suffix used for shared libraries on …","Specifies the file extension, if any, used for executable …","Specifies the filename suffix used for executable binaries …","The family of the operating system. Example value is <code>unix</code>.","A string describing the specific operating system in use. …","","","","","","","A builder used to create directories in various manners.","Entries returned by the <code>ReadDir</code> iterator.","A reference to an open file on the filesystem.","A structure representing a type of file with accessors for …","Metadata information about a file.","Options and flags which can be used to configure how a …","Representation of the various permissions on a file.","Iterator over the entries in a directory.","Returns the last access time of this metadata.","Sets the option for the append mode.","","","","","","","","","","","","","","","","","","","","Returns the canonical, absolute form of a path with all …","","","","","","","","","Copies the contents of one file to another. This function …","Sets the option to create a new file, or open it if it …","Creates the specified directory with the options …","Creates a new, empty directory at the provided path","Recursively create a directory and all of its parent …","Sets the option to create a new file, failing if it …","Returns the creation time listed in this metadata.","","","","","","","","","Returns the bare file name of this directory entry without …","","Returns the file type for the file that this entry points …","Returns the file type for this metadata.","","","","","","","","","","","","","","","","","Creates a new hard link on the filesystem.","","","","","","","","","","","","","","","","Returns <code>true</code> if this metadata is for a directory. The …","Tests whether this file type represents a directory. The …","","Returns <code>true</code> if this metadata is for a regular file. The …","Tests whether this file type represents a regular file. …","","Returns <code>true</code> if this metadata is for a symbolic link.","Tests whether this file type represents a symbolic link. …","Returns the size of the file, in bytes, this metadata is …","Given a path, query the file system to get information …","Returns the metadata for the file that this entry points …","","","","","Returns the last modification time listed in this metadata.","","","","","Creates a blank new set of options ready for configuration.","Creates a new set of options with default mode/security …","","","Opens a file at <code>path</code> with the options specified by <code>self</code>.","Returns the full path to the file that this entry …","Returns the permissions of the file this metadata is for.","","Read the entire contents of a file into a bytes vector.","Sets the option for read access.","Returns an iterator over the entries within a directory.","Reads a symbolic link, returning the file that the link …","Read the entire contents of a file into a string.","Returns <code>true</code> if these permissions describe a readonly …","Indicates that directories should be created recursively, …","","Removes an empty directory.","Removes a directory at this path, after removing all its …","Removes a file from the filesystem.","Rename a file or directory to a new name, replacing the …","","Changes the permissions found on a file or a directory.","Modifies the readonly flag for this set of permissions. If …","","Creates a new symbolic link on the filesystem.","","","","","","","","","","","","","","","","","Query the metadata about a file without following symlinks.","","","","","Sets the option for truncating a previous file.","Returns <code>Ok(true)</code> if the path points at an existing entity.","","","","","","","","","","","","","","","","","","","","","","","Write a slice as the entire contents of a file.","Sets the option for write access."],"i":[0,0,0,0,0,1,0,2,0,3,0,0,0,0,0,0,2,0,0,0,4,5,2,2,2,6,4,2,2,7,2,5,8,2,2,7,8,8,5,5,2,6,4,7,9,8,8,5,2,6,4,7,9,8,5,2,2,9,9,10,5,9,8,3,8,6,4,8,2,8,2,6,4,8,5,2,2,2,8,5,2,5,2,11,2,2,2,7,2,0,8,2,8,2,6,8,6,4,12,6,4,8,2,3,5,9,0,8,5,2,5,0,0,6,4,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,2,6,4,8,5,2,5,2,8,8,5,0,5,5,5,6,2,3,3,2,10,7,9,6,4,7,9,8,5,2,6,4,7,7,9,8,8,8,8,8,8,2,2,2,2,2,8,2,2,5,7,8,2,8,0,9,2,2,2,9,5,8,5,2,7,7,9,8,5,2,6,4,7,9,8,2,8,9,2,8,9,5,7,8,5,5,5,2,7,5,2,5,7,9,10,5,2,2,5,6,0,2,2,2,7,5,6,4,6,4,2,3,9,8,5,2,2,7,7,2,2,3,9,5,8,8,8,8,8,8,8,8,5,5,5,5,5,5,5,2,8,2,8,2,7,7,5,5,7,7,7,0,2,8,8,3,7,9,13,6,4,8,5,2,8,8,7,7,8,8,5,5,2,5,7,7,2,2,6,4,8,5,2,5,5,5,5,2,7,5,6,4,7,9,8,2,1,6,4,7,9,8,2,6,4,7,9,8,5,2,2,2,2,2,2,2,3,0,6,9,8,11,2,5,5,10,7,9,9,10,10,7,0,10,7,9,10,2,2,2,14,0,0,0,15,15,0,0,0,0,0,0,16,17,18,19,20,15,21,16,17,18,19,20,15,21,15,15,0,0,0,15,21,15,15,16,17,18,19,20,15,15,21,21,16,17,18,19,20,15,21,0,16,17,18,19,20,21,16,17,18,19,20,15,21,16,17,18,19,20,19,20,0,19,20,15,16,17,18,19,20,19,20,0,0,0,16,17,18,19,20,0,0,15,15,21,16,17,18,19,20,15,21,16,17,18,19,20,15,21,16,17,18,19,20,15,21,0,0,0,0,22,0,0,0,0,0,0,0,0,23,24,25,26,27,28,0,0,0,0,0,0,0,0,24,26,24,24,24,24,24,23,24,25,26,27,28,29,23,24,25,26,27,28,29,0,24,26,27,28,24,26,27,28,0,26,29,0,0,26,24,24,24,26,24,27,28,27,28,23,23,23,24,23,24,25,26,27,28,29,23,24,25,26,27,28,29,27,24,0,28,7,29,23,24,23,24,25,26,27,28,29,25,28,28,24,28,28,24,28,28,24,28,24,0,23,24,26,27,29,24,24,24,27,28,26,29,25,24,26,23,24,24,0,26,0,0,0,27,29,29,0,0,0,0,27,0,27,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,24,26,27,28,26,0,23,24,25,26,27,28,29,23,24,25,26,27,28,29,23,24,25,26,27,28,29,24,0,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["argmatches",3]]],null,[[],["ancestors",3]],[[["option",4]],["option",4]],[[],["option",4]],[[]],null,null,[[],["option",4]],[[],["option",4]],[[],["borrowedfd",3]],[[],["option",4]],[[],["osstr",3]],[[],["path",3]],[[["pin",3,[["option",4]]]],["option",4,[["pin",3]]]],[[["pin",3,[["option",4]]]],["option",4,[["pin",3]]]],[[],["i32",15]],[[],["path",3]],[[],["osstr",3]],[[],["osstr",3]],[[],["path",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["path",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["controlflow",4]],null,[[]],[[]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["package",3]],[[],["repository",3]],[[],["pathbuf",3]],[[],["option",4]],[[["pathbuf",3]]],[[["option",4]]],[[]],[[]],[[]],[[["pathbuf",3]]],[[]],[[],["option",4]],[[],["option",4]],[[["pathbuf",3]],["ordering",4]],[[["path",3]],["ordering",4]],[[["option",4]],["ordering",4]],[[],["components",3]],[[],["bool",15]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["option",4]],[[],["option",4]],[[],["result",4,[["file",3],["error",3]]]],[[["option",4]],["createddelta",3]],[[["argmatches",3]]],[[],["result",4,[["pathbuf",3]]]],[[],["result",4,[["option",4]]]],[[],["pathbuf",3]],[[],["option",4]],null,[[],["path",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["pathbuf",3]]]],[[],["result",4,[["option",4]]]],[[],["genericarray",3,[["u8",15]]]],[[],["display",3]],[[]],[[["argmatches",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,[[["package",3]],["bool",15]],[[["repository",3]],["bool",15]],[[["cow",4]],["bool",15]],[[["cow",4]],["bool",15]],[[["osstr",3]],["bool",15]],[[["pathbuf",3]],["bool",15]],[[["path",3]],["bool",15]],[[["osstring",3]],["bool",15]],[[["path",3]],["bool",15]],[[["osstr",3]],["bool",15]],[[["path",3]],["bool",15]],[[["osstr",3]],["bool",15]],[[["osstr",3]],["bool",15]],[[["cow",4]],["bool",15]],[[["cow",4]],["bool",15]],[[["pathbuf",3]],["bool",15]],[[["osstring",3]],["bool",15]],[[["option",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]]],[[]],[[]],[[],["option",4,[["osstr",3]]]],[[["argmatches",3]]],[[],["option",4,[["osstr",3]]]],[[],["option",4,[["osstr",3]]]],[[],["option",4,[["osstr",3]]]],null,[[],["option",4]],[[],["genericarray",3,[["u8",15]]]],[[],["genericarray",3,[["u8",15]]]],[[],["option",4]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["ownedfd",3]],["file",3]],[[]],[[]],[[]],[[["string",3]],["pathbuf",3]],[[["box",3,[["path",3],["global",3]]]],["pathbuf",3]],[[["cow",4,[["path",3]]]],["pathbuf",3]],[[["osstring",3]],["pathbuf",3]],[[],["pathbuf",3]],[[]],[[["never",15]]],[[["option",4]],["option",4]],[[["option",4]],["option",4]],[[],["option",4]],[[],["pathbuf",3]],[[],["option",4]],[[],["option",4]],[[],["result",4,[["cow",4,[["path",3]]],["encodingerror",3]]]],[[["i32",15]],["file",3]],[[["vec",3,[["u8",15],["global",3]]]],["result",4,[["pathbuf",3],["encodingerror",3]]]],[[["option",4,[["infallible",4]]]],["option",4]],[[["str",15]],["result",4,[["pathbuf",3]]]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["initializer",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["box",3,[["path",3],["global",3]]]],[[],["result",4,[["intoinnererror",3,[["bufwriter",3]]]]]],[[],["intoiter",3]],[[],["osstring",3]],[[]],[[["box",3,[["path",3],["global",3]]]],["pathbuf",3]],[[],["i32",15]],[[],["vec",3,[["u8",15],["global",3]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["iter",3]],[[],["itermut",3]],[[],["pathbuf",3]],null,[[],["vec",3,[["string",3]]]],[[],["option",4]],[[]],[[]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["result",4,[["metadata",3],["error",3]]]],null,null,[[["package",3]],["bool",15]],[[["repository",3]],["bool",15]],[[["option",4]],["bool",15]],[[]],[[],["bufwriter",3]],[[],["pathbuf",3]],[[],["path",3]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["file",3],["error",3]]]],[[],["openoptions",3]],[[["option",4]],["option",4]],[[],["option",4]],[[],["usize",15]],null,[[],["option",4,[["path",3]]]],[[["pathbuf",3]],["option",4,[["ordering",4]]]],[[["path",3]],["option",4,[["ordering",4]]]],[[["osstr",3]],["option",4,[["ordering",4]]]],[[["osstring",3]],["option",4,[["ordering",4]]]],[[["cow",4]],["option",4,[["ordering",4]]]],[[["path",3]],["option",4,[["ordering",4]]]],[[["osstr",3]],["option",4,[["ordering",4]]]],[[["cow",4]],["option",4,[["ordering",4]]]],[[["cow",4]],["option",4,[["ordering",4]]]],[[["path",3]],["option",4,[["ordering",4]]]],[[["osstr",3]],["option",4,[["ordering",4]]]],[[["cow",4]],["option",4,[["ordering",4]]]],[[["osstring",3]],["option",4,[["ordering",4]]]],[[["pathbuf",3]],["option",4,[["ordering",4]]]],[[["osstr",3]],["option",4,[["ordering",4]]]],[[["option",4]],["option",4,[["ordering",4]]]],[[],["bool",15]],[[],["option",4]],[[]],[[],["option",4]],[[],["result",4,[["usize",15],["error",3]]]],[[["u64",15]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["readdir",3],["error",3]]]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[["vec",3]],["result",4,[["usize",15],["error",3]]]],[[["string",3]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[]],[[["seekfrom",4]],["result",4,[["u64",15],["error",3]]]],[[["seekfrom",4]],["result",4,[["u64",15],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[]],[[["u64",15]],["result",4,[["error",3]]]],[[["permissions",3]],["result",4,[["error",3]]]],[[["usize",15]]],[[]],[[],["bool",15]],[[],["result",4,[["path",3],["stripprefixerror",3]]]],[[],["option",4]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["option",4]],[[],["json",4]],[[]],[[]],[[]],[[],["pathbuf",3]],[[]],[[],["pathbuf",3]],[[],["cow",4]],[[],["option",4,[["str",15]]]],[[],["cow",4,[["str",15]]]],[[],["result",4,[["option",4]]]],[[],["result",4,[["file",3],["error",3]]]],[[],["result",4,[["bool",15],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]],["bufwriter",3]],[[["usize",15]],["pathbuf",3]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["pathbuf",3]],[[],["pathbuf",3]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["u64",15]],["result",4,[["usize",15],["error",3]]]],[[["str",15]]],[[["arguments",3]],["result",4,[["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[["option",4]],["option",4]],[[["option",4]],["option",4]],[[["option",4]],["option",4]],null,null,null,null,null,null,null,null,null,null,[[],["args",3]],[[],["argsos",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["varerror",4]],[[]],null,[[],["result",4,[["pathbuf",3],["error",3]]]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[],["str",15]],[[],["str",15]],[[["varerror",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["pathbuf",3]]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["result",4,[["osstring",3],["joinpathserror",3]]]],[[],["usize",15]],[[],["usize",15]],[[["varerror",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4,[["pathbuf",3]]]],[[],["option",4,[["string",3]]]],[[],["option",4,[["osstring",3]]]],[[],["option",4,[["string",3]]]],[[],["option",4,[["osstring",3]]]],[[]],[[],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["splitpaths",3]],[[],["pathbuf",3]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4,[["string",3],["varerror",4]]]],[[],["option",4,[["osstring",3]]]],[[],["vars",3]],[[],["varsos",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["systemtime",3],["error",3]]]],[[["bool",15]],["openoptions",3]],[[],["stat",3]],[[],["i64",15]],[[],["i64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[],["metadata",3]],[[],["openoptions",3]],[[],["permissions",3]],[[],["filetype",3]],[[]],[[]],[[]],[[]],[[],["result",4,[["u64",15],["error",3]]]],[[["bool",15]],["openoptions",3]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["bool",15]],["openoptions",3]],[[],["result",4,[["systemtime",3],["error",3]]]],[[],["i64",15]],[[],["i64",15]],[[["i32",15]],["openoptions",3]],[[],["u64",15]],[[["permissions",3]],["bool",15]],[[["filetype",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["osstring",3]],[[],["osstr",3]],[[],["result",4,[["filetype",3],["error",3]]]],[[],["filetype",3]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["permissions",3]],[[],["u32",15]],[[],["result",4,[["error",3]]]],[[]],null,null,[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u64",15]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["result",4,[["metadata",3],["error",3]]]],[[],["u32",15]],[[["u32",15]],["openoptions",3]],[[],["u32",15]],[[["u32",15]],["dirbuilder",3]],[[],["result",4,[["systemtime",3],["error",3]]]],[[],["i64",15]],[[],["i64",15]],[[["permissions",3]],["bool",15]],[[["filetype",3]],["bool",15]],[[],["openoptions",3]],[[],["dirbuilder",3]],[[],["option",4,[["result",4,[["direntry",3],["error",3]]]]]],[[],["u64",15]],[[],["result",4,[["file",3],["error",3]]]],[[],["pathbuf",3]],[[],["permissions",3]],[[],["u64",15]],[[],["result",4,[["vec",3,[["u8",15],["global",3]]],["error",3]]]],[[["bool",15]],["openoptions",3]],[[],["result",4,[["readdir",3],["error",3]]]],[[],["result",4,[["pathbuf",3],["error",3]]]],[[],["result",4,[["string",3],["error",3]]]],[[],["bool",15]],[[["bool",15]],["dirbuilder",3]],null,[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["u32",15]]],[[["permissions",3]],["result",4,[["error",3]]]],[[["bool",15]]],[[],["u64",15]],[[],["result",4,[["error",3]]]],[[],["i64",15]],[[],["i64",15]],[[],["u64",15]],[[],["u64",15]],[[],["i64",15]],[[],["i64",15]],[[],["u64",15]],[[],["u32",15]],[[],["u64",15]],[[],["u32",15]],[[],["i64",15]],[[],["i64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u32",15]],[[],["result",4,[["metadata",3],["error",3]]]],[[]],[[]],[[]],[[]],[[["bool",15]],["openoptions",3]],[[],["result",4,[["bool",15],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[],["result",4,[["error",3]]]],[[["bool",15]],["openoptions",3]]],"p":[[8,"TryInto"],[4,"Option"],[8,"Digest"],[3,"Repository"],[3,"Path"],[3,"Package"],[3,"File"],[3,"PathBuf"],[3,"BufWriter"],[8,"Write"],[8,"Context"],[8,"Deserialize"],[8,"Serialize"],[13,"Some"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"Args"],[3,"ArgsOs"],[3,"JoinPathsError"],[13,"NotUnicode"],[3,"DirEntry"],[3,"Metadata"],[3,"ReadDir"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"DirBuilder"]],"a":{"chdir":[454],"mkdir":[547],"rmdir":[631]}}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};